package example

// sample secret deriver inspired by https://www.bolet.org/makwa/makwa-spec-20150422.pdf
// This is homegrown just because it reduces dependencies and only uses big integer operations so could run fast on the client in javascript
// (javascript only has big integer already compiled to its V8 engine and a javascript argon2id implementation is way too slow).
//But writing your own crypto algorithm is never recommended so please take the effort to use the password hashing competition winner argon2id
//implemented at https://github.com/learnfromgirls/argon2-go-withsecret (which also implements the safesecrets interfaces)
//unfortunately for security this must run as fast as possible to maximise attacker costs.
//so a native argon2 C library is required which will then need to be installed.

import (
	"github.com/learnfromgirls/safesecrets"
	"math/big"
	"fmt"
)

type DefaultSecretSetter struct {
	secret [] byte
}

func (dss *DefaultSecretSetter) SetSecret(secretIn [] byte) () {
	dss.secret = secretIn
}

func ExampleRun() () {
	dsd := &DefaultSecretDeriver{}
	dss := &DefaultSecretSetter{}
	dsd.SetSecrets([] byte("password"), [] byte("salt"), dss)
	fmt.Printf("secret now set to %v\n", dss.secret)

}

type DefaultSecretDeriver struct {

}

//return a known product of 2 primes (each 12000 bits) giving a composite number of 24000 bits,
//with only 2 prime factors each huge, and the original prime factors have been discarded.
//It is computationally infeasible to recover the original prime factors from the composite.
//effectively any random number will be relatively prime (coprime) to this composite.


func LargeComposite() big.Int {

	s := "38585325741186963638141964716256328831147758949411934733809373412456" +
		"01668455817571515879388637071521480319863553716025655249715163153096" +
		"06137436119996200531337897835720123070581407111160955061053645518485" +
		"82407860809284885096994082737765056648605305147379743652140034847196" +
		"54523010257150622610919743304404967847499567500135366970628374052384" +
		"19827267511979265471175079557589595829727557027291365740812648740353" +
		"14738664138964620589095536984953956483488521520442831773746969077594" +
		"61578292517516110731677718338226862052508938751649549434284281134858" +
		"40345110587544960228635656827741720425073767781014366353497145083735" +
		"95130015940827641866979895299453927746235793275684280220789311299279" +
		"26018102437100215159131963377947279950315054807771318998664006017448" +
		"44763916422150573199454026361056571761648605305309473050274695408497" +
		"63519821241878524489685269929793623195725816804966923581883276319998" +
		"69973102841503320256311927340384622459190074013250578018020939581533" +
		"81004938250105320857699286491179713765646346547595379070289353137543" +
		"56533509004504995734752272116414323962745102258174748092103578711861" +
		"52471816991835122047362192926286070925063445485870350195016342785083" +
		"27047142224744734591484641037046218893293401708045865867475569959189" +
		"07411019778536417836572433218633377438092847522351191700792460642664" +
		"24799251960113489139022323444090807804170707552830853263057342883500" +
		"47263001972131140311683065208334308399992963786516959280733990717142" +
		"40714935249242589331924099509195019811456053664115682671036298669778" +
		"81003231605663377905354128594933583496541130934950166622036241740195" +
		"55278189227956318373056102482680127856294328991194499583247281566136" +
		"90477932356899728157570360601638927950749332380316782707613905480713" +
		"80486178902529344286483303400252900433974647091350592743331375715031" +
		"96127029913072863493162598424720819308096781244609527710868254253227" +
		"73438338778862901010731814688105429559200572782699505498194167268711" +
		"07556287203934788914260526031820954737249431707312108150317351180663" +
		"71686841237342436758009844878034957024686988202452421379711929806208" +
		"10179233750742772801120317243039422419683382811150563863646587910437" +
		"28567834403961601227525131352252675424600885515343335518708267464889" +
		"16231198222005320973304720101712203103470420511226685256891043124560" +
		"77131867322157298445774768276016132279203662000151111091276701598898" +
		"82062443706400314488148879305399290535994743886736968392384283542613" +
		"60070087419622490782238310347897548417177004378958685587413634989938" +
		"98886160297603848987681813775837748051741924200549667320938840091283" +
		"93955195842441830779536265191714188844663250420740618537203394238270" +
		"70749062257553488168299136860205848592824220752844110615102346921996" +
		"56673884747341993146827945589982013320205500051741485756157914581991" +
		"95161003391558543872279947144662318875662466603202223824981530157082" +
		"63039524340810154425554035587666142876894585740286781756162023369950" +
		"35769805591710987762053951129529237675794425770557954114905602794054" +
		"23912693180399917435465360064963352127355174957926752832898226597258" +
		"64586630647448953611692399667908281251230962884211126682164287593189" +
		"54174266514657923272068223022519191116094074168146596096423608698543" +
		"04673374997406257505625618730975738482304590856725647692834275645708" +
		"28393308665933999605897547522890933237449815105998384570578448757060" +
		"28143751840176442511556210360284793683183109500902880120978076808536" +
		"07068172826499525314237322091252708764988341187552211261355339868155" +
		"34050873144600288013573912577699910741878838089746923523857204913831" +
		"66423186084991807157605817527652567294226557716209582284777352539718" +
		"24669260744874248502650042246767619658272902944167156414834959217967" +
		"82926070442594472728885089479978429741213797114922070318865628285993" +
		"18712380464543986537968304050531792801759911841196850456896616072818" +
		"28848554308528607327471936668015059729961167181233176247577474308749" +
		"64241015387019588120004876746314073032584763789752713562445896752527" +
		"95076267351358208135489704746837187555599938815033972857261222730299" +
		"73582960880437871898453183515489857033037148511455413007130520762544" +
		"43748501235936684594031329857061557203721896465190794246759954163973" +
		"22791152576440066642395961691677377277520739051093496280820942454999" +
		"87438761739294635733121613582984168103687142508408459470561695200465" +
		"22103196256238554886913529389943081500262261831411087778597011480159" +
		"15418598499530537074814727038841288953491376468804980321624713069142" +
		"00636276304887072837221437327879610760391751841510990770601274826717" +
		"12784839267289960571494399021215945899844718487409936418568323173539" +
		"69912540908102902699161952571051439355429710757590283877090041355876" +
		"23078907154047387372554792759399840715179519126017158280592555802403" +
		"25628734146959082794885069020543248154961353973016277090020241602310" +
		"08914847634009880692456713816393320851934592574172165147322607967201" +
		"03558596284594115313264798738347653112955479975153342554669851956341" +
		"25487850484632040149032651936740395832598968791234018766636669764560" +
		"32553970874752565961144270276041540573977218875459035480103025412701" +
		"59225920051712760669061131369025011861336314299582166093805721326345" +
		"32966961599767490321455402341461744371335334244553222868293331376037" +
		"50172529722108315034174785473626045384323412584435247284164828946926" +
		"19911520508253847054985242443855634824152568216679705684044166906112" +
		"44320507529017443869740805930320267269946784916562509764970113456227" +
		"81628410257321099446883904063179480810572762391640704268442996205730" +
		"58354566102187566511788069011295639439326202617342254295562565210629" +
		"01102504415499804758156840511111150506162850067600233556035371046687" +
		"93187028394514350142995526786329053273526805758597829632633439218905" +
		"09391028305348070353207276760919031598024009416626228601452909224899" +
		"46726067196206185379348382984576521869518453622504472612517737188781" +
		"49652018832645397114571727198856344380669280859939730834034685581395" +
		"55678848808085660625505605500755536593685705947077621320540977907949" +
		"09791770913594937775541720392394438901782145868253692826070771921557" +
		"17287451917640666817790622564139103827455641381902429078501346935408" +
		"69370607724918614521119344403402101047122623663433049527278694067286" +
		"53579588923610041366022107456184842997944713514212113053832518024077" +
		"11118866759044385145091863952112666001958284368460355931105791501694" +
		"47639539087353117554781900301905241808718932632385899935069611657377" +
		"54136124616820853316440615306557060875157945260680334253532569214832" +
		"93169870577822851247724732046445438463318658183604945021514865684778" +
		"56667101670587759509869322103405079064689312418225974032376655199224" +
		"12806944190638484110546929471317315038592320250021175152932913794556" +
		"16907994872747677622227864708354997535854526063038032291867577593078" +
		"04059035192681007985974567284282676110050898150088476997763310996608" +
		"84641195188818982335983847220007340737934505643077038979136687784481" +
		"23083565454163010697777377881699591968811540621150206390961303255903" +
		"02171297667537194699226193949219706025362909301440208553755437063429" +
		"52606887211813385030584462343984879108610817489062386670267850523295" +
		"41535141186259335322049012820057165124613247630238626131986929184995" +
		"10132646618094566768520762969917929609369508225070060672612632096751" +
		"72701801775028334121694279104896298744770851277732715045588249811857" +
		"35168841695372579393980282104151968281116794230289052632159243346018" +
		"61953094651000301"
	var b big.Int
	b.SetString(s, 10)
	return b
}
func SmallPrime128() big.Int {
	s := "335759994920303926158771314170067534471"
	var b big.Int
	b.SetString(s, 10)
	return b
}
func AnotherSmallPrime128() big.Int {
	s := "323415515778108720741627364911826248037"
	var b big.Int
	b.SetString(s, 10)
	return b
}


//Writing your own crypto algorithm is never recommended so please take the effort to use the password hashing competition winner argon2id
//implemented at https://github.com/learnfromgirls/argon2-go-withsecret (which also implements the safesecrets interfaces)

func (dsd *DefaultSecretDeriver) Hash(password []byte, salt []byte) (hash []byte, err error) {
	var p big.Int
	p.SetBytes(password)
	var s big.Int
	s.SetBytes(salt)
	var z big.Int
	var n big.Int = LargeComposite()

	zp := z.Mul(&p, &s) //combine all bits of password and salt
	var sp128 big.Int = SmallPrime128()
	zp = zp.Add(zp, &sp128) //ADD some known low order random bits of our own in case input salt was rubbish

	//expand to 12000 bits
	//not squaring yet just expanding. what exponent do we need to reach 12000 bits
	//this ensures that our first squaring will be expanding to the full 24000 bits
	bl := zp.BitLen()

	exp := uint64(12000 / bl)
	var bigexp big.Int
	bigexp.SetUint64(exp)
	if exp > 1 {
		zp = zp.Exp(zp, &bigexp, &n)
		bl = zp.BitLen()
	}

	cost := 10000 //min 2, the number of squarings/mod we will do (about 10 seconds)
	two := uint64(2)

	bigexp.SetUint64(two) //exp 2 is same as squaring.
	for i := 0; i < cost; i++ {
		// MAIN HASHING. Apparently hard to parallelise or do on GPUs
		zp = zp.Exp(zp, &bigexp, &n)
	}

	//Reducing 24000 random bits down to 128 bits)
	var asp128 big.Int = AnotherSmallPrime128()
	zp = zp.Exp(zp, &bigexp, &asp128)
	rb := zp.Bytes()
	fmt.Printf("hashed bytes length=%v\n", len(rb))
	return rb, nil

}
func (dsd *DefaultSecretDeriver)SetSecrets(password []byte, initialsalt []byte, ssa ...safesecrets.SecretSetter) (err error) {
	if len(ssa) >= 1 {
		for i := 0; i < len(ssa); i++ {
			hash, err := dsd.Hash(password, initialsalt)
			if err != nil {
				return err;
			}
			ssa[i].SetSecret(hash)

			initialsalt = hash
		}
	}
	return nil
}
